/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * Documentation for the API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ErrorResponse
     */
    'errors'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface FileUploadRequest
 */
export interface FileUploadRequest {
    /**
     * 
     * @type {File}
     * @memberof FileUploadRequest
     */
    'file'?: File;
    /**
     * 
     * @type {string}
     * @memberof FileUploadRequest
     */
    'destinationPath'?: string;
}
/**
 * 
 * @export
 * @interface PageRequestObject
 */
export interface PageRequestObject {
    /**
     * 
     * @type {number}
     * @memberof PageRequestObject
     */
    'pageNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof PageRequestObject
     */
    'pageSize'?: number;
    /**
     * 
     * @type {SortObject}
     * @memberof PageRequestObject
     */
    'sort'?: SortObject;
    /**
     * 
     * @type {number}
     * @memberof PageRequestObject
     */
    'offset'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PageRequestObject
     */
    'paged'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PageRequestObject
     */
    'unpaged'?: boolean;
}
/**
 * 
 * @export
 * @interface PaginatedResponseReport
 */
export interface PaginatedResponseReport {
    /**
     * 
     * @type {Array<Report>}
     * @memberof PaginatedResponseReport
     */
    'data'?: Array<Report>;
    /**
     * 
     * @type {number}
     * @memberof PaginatedResponseReport
     */
    'currentPage'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedResponseReport
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedResponseReport
     */
    'totalCount'?: number;
}
/**
 * 
 * @export
 * @interface QueryBuilderParams
 */
export interface QueryBuilderParams {
    /**
     * 
     * @type {PageRequestObject}
     * @memberof QueryBuilderParams
     */
    'pageRequest'?: PageRequestObject;
}
/**
 * 
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * 
     * @type {number}
     * @memberof Report
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'status'?: ReportStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'reportType'?: ReportReportTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'createdByUserId'?: string;
    /**
     * 
     * @type {Array<ReportResult>}
     * @memberof Report
     */
    'reportResults'?: Array<ReportResult>;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'createdDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Report
     */
    'lastModifiedDate'?: string;
}

export const ReportStatusEnum = {
    InProgress: 'IN_PROGRESS',
    Completed: 'COMPLETED',
    Failed: 'FAILED'
} as const;

export type ReportStatusEnum = typeof ReportStatusEnum[keyof typeof ReportStatusEnum];
export const ReportReportTypeEnum = {
    TaskReport: 'TASK_REPORT',
    UserReport: 'USER_REPORT'
} as const;

export type ReportReportTypeEnum = typeof ReportReportTypeEnum[keyof typeof ReportReportTypeEnum];

/**
 * 
 * @export
 * @interface ReportResult
 */
export interface ReportResult {
    /**
     * 
     * @type {number}
     * @memberof ReportResult
     */
    'id'?: number;
    /**
     * 
     * @type {Report}
     * @memberof ReportResult
     */
    'report'?: Report;
    /**
     * 
     * @type {string}
     * @memberof ReportResult
     */
    'details'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReportResult
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ReportResult
     */
    'createdDate'?: string;
}
/**
 * 
 * @export
 * @interface SortObject
 */
export interface SortObject {
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'sorted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'unsorted'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SortObject
     */
    'empty'?: boolean;
}

/**
 * ReportControllerApi - axios parameter creator
 * @export
 */
export const ReportControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Report} report 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport: async (report: Report, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'report' is not null or undefined
            assertParamExists('createReport', 'report', report)
            const localVarPath = `/api/v1/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(report, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReport: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteReport', 'id', id)
            const localVarPath = `/api/v1/report/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QueryBuilderParams} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReports: async (query: QueryBuilderParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getAllReports', 'query', query)
            const localVarPath = `/api/v1/report/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                for (const [key, value] of Object.entries(query)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getReportById', 'id', id)
            const localVarPath = `/api/v1/report/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportControllerApi - functional programming interface
 * @export
 */
export const ReportControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Report} report 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReport(report: Report, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReport(report, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportControllerApi.createReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReport(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReport(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportControllerApi.deleteReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {QueryBuilderParams} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllReports(query: QueryBuilderParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllReports(query, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportControllerApi.getAllReports']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportControllerApi.getReportById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReportControllerApi - factory interface
 * @export
 */
export const ReportControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {Report} report 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport(report: Report, options?: RawAxiosRequestConfig): AxiosPromise<Report> {
            return localVarFp.createReport(report, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReport(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteReport(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QueryBuilderParams} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReports(query: QueryBuilderParams, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseReport> {
            return localVarFp.getAllReports(query, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportById(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Report> {
            return localVarFp.getReportById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportControllerApi - object-oriented interface
 * @export
 * @class ReportControllerApi
 * @extends {BaseAPI}
 */
export class ReportControllerApi extends BaseAPI {
    /**
     * 
     * @param {Report} report 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportControllerApi
     */
    public createReport(report: Report, options?: RawAxiosRequestConfig) {
        return ReportControllerApiFp(this.configuration).createReport(report, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportControllerApi
     */
    public deleteReport(id: number, options?: RawAxiosRequestConfig) {
        return ReportControllerApiFp(this.configuration).deleteReport(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QueryBuilderParams} query 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportControllerApi
     */
    public getAllReports(query: QueryBuilderParams, options?: RawAxiosRequestConfig) {
        return ReportControllerApiFp(this.configuration).getAllReports(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportControllerApi
     */
    public getReportById(id: number, options?: RawAxiosRequestConfig) {
        return ReportControllerApiFp(this.configuration).getReportById(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StorageControllerApi - axios parameter creator
 * @export
 */
export const StorageControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} filePath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: async (filePath: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filePath' is not null or undefined
            assertParamExists('deleteFile', 'filePath', filePath)
            const localVarPath = `/api/v1/storage/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filePath !== undefined) {
                localVarQueryParameter['filePath'] = filePath;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} filePath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile: async (filePath: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filePath' is not null or undefined
            assertParamExists('downloadFile', 'filePath', filePath)
            const localVarPath = `/api/v1/storage/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filePath !== undefined) {
                localVarQueryParameter['filePath'] = filePath;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} directoryPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiles: async (directoryPath: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'directoryPath' is not null or undefined
            assertParamExists('listFiles', 'directoryPath', directoryPath)
            const localVarPath = `/api/v1/storage/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (directoryPath !== undefined) {
                localVarQueryParameter['directoryPath'] = directoryPath;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FileUploadRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (request: FileUploadRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('uploadFile', 'request', request)
            const localVarPath = `/api/v1/storage/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (request !== undefined) {
                for (const [key, value] of Object.entries(request)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StorageControllerApi - functional programming interface
 * @export
 */
export const StorageControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StorageControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} filePath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFile(filePath: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(filePath, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StorageControllerApi.deleteFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} filePath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFile(filePath: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(filePath, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StorageControllerApi.downloadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} directoryPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFiles(directoryPath: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFiles(directoryPath, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StorageControllerApi.listFiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FileUploadRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(request: FileUploadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StorageControllerApi.uploadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StorageControllerApi - factory interface
 * @export
 */
export const StorageControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StorageControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} filePath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(filePath: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteFile(filePath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} filePath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(filePath: string, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.downloadFile(filePath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} directoryPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiles(directoryPath: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.listFiles(directoryPath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FileUploadRequest} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(request: FileUploadRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.uploadFile(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StorageControllerApi - object-oriented interface
 * @export
 * @class StorageControllerApi
 * @extends {BaseAPI}
 */
export class StorageControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} filePath 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageControllerApi
     */
    public deleteFile(filePath: string, options?: RawAxiosRequestConfig) {
        return StorageControllerApiFp(this.configuration).deleteFile(filePath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} filePath 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageControllerApi
     */
    public downloadFile(filePath: string, options?: RawAxiosRequestConfig) {
        return StorageControllerApiFp(this.configuration).downloadFile(filePath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} directoryPath 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageControllerApi
     */
    public listFiles(directoryPath: string, options?: RawAxiosRequestConfig) {
        return StorageControllerApiFp(this.configuration).listFiles(directoryPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FileUploadRequest} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageControllerApi
     */
    public uploadFile(request: FileUploadRequest, options?: RawAxiosRequestConfig) {
        return StorageControllerApiFp(this.configuration).uploadFile(request, options).then((request) => request(this.axios, this.basePath));
    }
}



